// This file was automatically generated by scripts/regen-js.pl at 20190828-043424
// applies JSON schema to generate Deriv API

/* eslint-disable max-len */

// =======================
// ----- API Methods -----
// =======================

export default class DerivAPICalls {
    // To be implemented by the sub-class
    // constructor() { }

    /**
     * @param {Object} args
     * @param {Number} args.account_closure - Must be 1
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {String} args.reason - Reason for closing off accounts.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    accountClosure(args = {}) {
        const config = {
            account_closure: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            reason     : {
                required: 1,
                type    : 'string',
            },
            req_id: {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'account_closure',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.account_security - Must be 1
     * @param {String} args.otp - OTP (one-time passcode) generated by a 2FA application like Authy, Google Authenticator or Yubikey.
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Any} args.totp_action - Action to be taken for managing TOTP (time-based one-time password, RFC6238). Generate will create a secret key which is then returned in the secret_key response field, you can then enable by using that code in a 2FA application.
     */
    accountSecurity(args = {}) {
        const config = {
            account_security: {
                required: 1,
                type    : 'numeric',
            },
            otp: {
                type: 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            totp_action: {},
        };

        const allArgs = {
            method        : 'account_security',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.account_statistics - Must be 1.
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field
     * @param {Number} args.req_id - Optional field to map request to response
     */
    accountStatistics(args = {}) {
        const config = {
            account_statistics: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'account_statistics',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.active_symbols - If you use 'brief', only a subset of fields will be returned.
     * @param {Any} args.landing_company - [Optional] If you specify this field, only symbols available for trading by that landing company will be returned. If you are logged in, only symbols available for trading by your landing company will be returned regardless of what you specify in this field.
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Any} args.product_type - [Optional] If you specify this field, only symbols that can be traded through that product type will be returned.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     */
    activeSymbols(args = {}) {
        const config = {
            active_symbols: {
                required: 1,
            },
            landing_company: {},
            passthrough    : {},
            product_type   : {},
            req_id         : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'active_symbols',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.api_token - Must be 1
     * @param {String} args.delete_token - The token to remove
     * @param {String} args.new_token - The name of the created token
     * @param {Any} args.new_token_scopes -
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Number} args.valid_for_current_ip_only - Optional field, if you set this parameter during token creation, then the token created will only work for the IP address that was used to create the token
     */
    apiToken(args = {}) {
        const config = {
            api_token: {
                required: 1,
                type    : 'numeric',
            },
            delete_token: {
                type: 'string',
            },
            new_token: {
                type: 'string',
            },
            new_token_scopes: {},
            passthrough     : {},
            req_id          : {
                type: 'numeric',
            },
            valid_for_current_ip_only: {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'api_token',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.app_delete - Application app_id
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    appDelete(args = {}) {
        const config = {
            app_delete: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'app_delete',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.app_get - Application app_id
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    appGet(args = {}) {
        const config = {
            app_get: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'app_get',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.app_list -
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    appList(args = {}) {
        const config = {
            app_list: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'app_list',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.app_id - Optional: specific application app_id to report on
     * @param {Number} args.app_markup_details - Must be 1.
     * @param {String} args.client_loginid - Optional: specific client loginid to report on, like CR12345
     * @param {String} args.date_from - Start date (epoch or YYYY-MM-DD HH:MM:SS). Results are inclusive of this time.
     * @param {String} args.date_to - End date (epoch or YYYY-MM-DD HH::MM::SS). Results are inclusive of this time.
     * @param {Number} args.description - If set to 1, will return app_markup transaction details.
     * @param {Number} args.limit - Optional: (default 1000): Apply upper limit to count of transactions received
     * @param {Number} args.offset - Optional: Skip this many transactions
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {String} args.sort - Optional transaction_time sort direction, default DESC. Other fields sort order is ASC.
     * @param {Any} args.sort_fields - Optional one or more of the specified fields to sort on. Default sort field is by transaction_time.
     */
    appMarkupDetails(args = {}) {
        const config = {
            app_id: {
                type: 'numeric',
            },
            app_markup_details: {
                required: 1,
                type    : 'numeric',
            },
            client_loginid: {
                type: 'string',
            },
            date_from: {
                required: 1,
                type    : 'string',
            },
            date_to: {
                required: 1,
                type    : 'string',
            },
            description: {
                type: 'numeric',
            },
            limit: {
                type: 'numeric',
            },
            offset: {
                type: 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            sort: {
                type: 'string',
            },
            sort_fields: {},
        };

        const allArgs = {
            method        : 'app_markup_details',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.app_markup_percentage - Markup to be added to contract prices (as a percentage of contract payout). Min: 0, Max: 5
     * @param {Number} args.app_register - Must be 1
     * @param {String} args.appstore - Application's App Store URL (if applicable)
     * @param {String} args.github - Application's GitHub page (for open-source projects)
     * @param {String} args.googleplay - Application's Google Play URL (if applicable)
     * @param {String} args.homepage - Application's homepage
     * @param {String} args.name - Application name
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {String} args.redirect_uri - Application redirect_uri
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Any} args.scopes -
     * @param {String} args.verification_uri - Application verification_uri
     */
    appRegister(args = {}) {
        const config = {
            app_markup_percentage: {
                type: 'numeric',
            },
            app_register: {
                required: 1,
                type    : 'numeric',
            },
            appstore: {
                type: 'string',
            },
            github: {
                type: 'string',
            },
            googleplay: {
                type: 'string',
            },
            homepage: {
                type: 'string',
            },
            name: {
                required: 1,
                type    : 'string',
            },
            passthrough : {},
            redirect_uri: {
                required: 1,
                type    : 'string',
            },
            req_id: {
                type: 'numeric',
            },
            scopes: {
                required: 1,
            },
            verification_uri: {
                type: 'string',
            },
        };

        const allArgs = {
            method        : 'app_register',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.app_markup_percentage - Markup to be added to contract prices (as a percentage of contract payout). Min: 0, Max: 5
     * @param {Number} args.app_update - Application app_id
     * @param {String} args.appstore - Application's App Store URL (if applicable)
     * @param {String} args.github - Application's GitHub page (for open-source projects)
     * @param {String} args.googleplay - Application's Google Play URL (if applicable)
     * @param {String} args.homepage - Application's homepage
     * @param {String} args.name - Application name
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {String} args.redirect_uri - Application redirect_uri
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Any} args.scopes - Change scopes will revoke all user's grants and log them out.
     * @param {String} args.verification_uri - Application verification_uri
     */
    appUpdate(args = {}) {
        const config = {
            app_markup_percentage: {
                type: 'numeric',
            },
            app_update: {
                required: 1,
                type    : 'numeric',
            },
            appstore: {
                type: 'string',
            },
            github: {
                type: 'string',
            },
            googleplay: {
                type: 'string',
            },
            homepage: {
                type: 'string',
            },
            name: {
                required: 1,
                type    : 'string',
            },
            passthrough : {},
            redirect_uri: {
                required: 1,
                type    : 'string',
            },
            req_id: {
                type: 'numeric',
            },
            scopes: {
                required: 1,
            },
            verification_uri: {
                type: 'string',
            },
        };

        const allArgs = {
            method        : 'app_update',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.asset_index - Must be 1.
     * @param {Any} args.landing_company - [Optional] If specified, will return only the underlyings for the specified landing company.
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     */
    assetIndex(args = {}) {
        const config = {
            asset_index: {
                required: 1,
                type    : 'numeric',
            },
            landing_company: {},
            passthrough    : {},
            req_id         : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'asset_index',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.add_to_login_history - [Optional] Send this when you use api tokens for authorization and want to track activity using login_history call.
     * @param {String} args.authorize - Authentication token. May be retrieved from https://www.binary.com/en/user/security/api_tokenws.html
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     */
    authorize(args = {}) {
        const config = {
            add_to_login_history: {},
            authorize           : {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'authorize',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.balance - Must be 1.
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Any} args.subscribe - If set to 1, will send updates whenever the balance changes.
     */
    balance(args = {}) {
        const config = {
            balance: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            subscribe: {},
        };

        const allArgs = {
            method        : 'balance',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.buy - Either the id received from a Price Proposal (proposal) call, or 1 if contract buy parameters are passed in the parameters field
     * @param {Any} args.parameters -
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.price - Maximum price at which to purchase the contract.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Any} args.subscribe - 1 - to stream
     */
    buy(args = {}) {
        const config = {
            buy: {
                required: 1,
                type    : 'string',
            },
            parameters: {
                amount: {
                    type: 'numeric',
                },
                app_markup_percentage: {
                    type: 'numeric',
                },
                barrier: {
                    type: 'string',
                },
                barrier2: {
                    type: 'string',
                },
                basis        : {},
                contract_type: {
                    required: 1,
                    type    : 'string',
                },
                currency: {
                    required: 1,
                    type    : 'string',
                },
                date_expiry: {
                    type: 'numeric',
                },
                date_start: {
                    type: 'numeric',
                },
                duration: {
                    type: 'numeric',
                },
                duration_unit: {},
                product_type : {
                    type: 'string',
                },
                selected_tick: {
                    type: 'numeric',
                },
                symbol: {
                    required: 1,
                    type    : 'string',
                },
                trading_period_start: {
                    type: 'numeric',
                },
            },
            passthrough: {},
            price      : {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            subscribe: {},
        };

        const allArgs = {
            method        : 'buy',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.buy_contract_for_multiple_accounts - Either the id received from a Price Proposal (proposal) call, or 1 if contract buy parameters are passed in the parameters field
     * @param {Any} args.parameters -
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.price - Maximum price at which to purchase the contract.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Any} args.tokens -
     */
    buyContractForMultipleAccounts(args = {}) {
        const config = {
            buy_contract_for_multiple_accounts: {
                required: 1,
                type    : 'string',
            },
            parameters: {
                amount: {
                    type: 'numeric',
                },
                app_markup_percentage: {
                    type: 'numeric',
                },
                barrier: {
                    type: 'string',
                },
                barrier2: {
                    type: 'string',
                },
                basis        : {},
                contract_type: {
                    required: 1,
                    type    : 'string',
                },
                currency: {
                    required: 1,
                    type    : 'string',
                },
                date_expiry: {
                    type: 'numeric',
                },
                date_start: {
                    type: 'numeric',
                },
                duration: {
                    type: 'numeric',
                },
                duration_unit: {},
                selected_tick: {
                    type: 'numeric',
                },
                symbol: {
                    required: 1,
                    type    : 'string',
                },
            },
            passthrough: {},
            price      : {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            tokens: {
                required: 1,
            },
        };

        const allArgs = {
            method        : 'buy_contract_for_multiple_accounts',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.cashier - either deposit or withdraw, default to deposit
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Any} args.provider - Note only doughflow is supported currently.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {String} args.verification_code - Email verification code (received from a verify_email call, which must be done first)
     */
    cashier(args = {}) {
        const config = {
            cashier: {
                required: 1,
            },
            passthrough: {},
            provider   : {},
            req_id     : {
                type: 'numeric',
            },
            verification_code: {
                type: 'string',
            },
        };

        const allArgs = {
            method        : 'cashier',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.cashier_password - Must be 1
     * @param {String} args.lock_password - new password to lock cashier, required for lock (length within 6-25 chars, accepts any printable ASCII character)
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {String} args.unlock_password - old password to unlock cashier, required for unlock (length within 6-25 chars, accepts any printable ASCII character)
     */
    cashierPassword(args = {}) {
        const config = {
            cashier_password: {
                required: 1,
                type    : 'numeric',
            },
            lock_password: {
                type: 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            unlock_password: {
                type: 'string',
            },
        };

        const allArgs = {
            method        : 'cashier_password',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.change_password - Must be 1
     * @param {String} args.new_password - New password (length within 6-25 chars, accepts any printable ASCII character)
     * @param {String} args.old_password - Old password for validation (non-empty string, accepts any printable ASCII character)
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    changePassword(args = {}) {
        const config = {
            change_password: {
                required: 1,
                type    : 'numeric',
            },
            new_password: {
                required: 1,
                type    : 'string',
            },
            old_password: {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'change_password',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.contracts_for - The short symbol name (obtained from active_symbols call).
     * @param {String} args.currency - [Optional] Currency of the contract's stake and payout (obtained from payout_currencies call).
     * @param {Any} args.landing_company - [Optional] Indicates which landing_company to get a list of contracts for. If you are logged in, your landing company will override this field.
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Any} args.product_type - [Optional] If you specify this field, only contracts tradable through that contract type will be returned.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     */
    contractsFor(args = {}) {
        const config = {
            contracts_for: {
                required: 1,
                type    : 'string',
            },
            currency: {
                type: 'string',
            },
            landing_company: {},
            passthrough    : {},
            product_type   : {},
            req_id         : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'contracts_for',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.assets - Optional field, used to set assets to be copied. E.x ["frxUSDJPY", "R_50"]
     * @param {String} args.copy_start - API tokens identifying the accounts of trader which will be used to copy trades
     * @param {Number} args.max_trade_stake - Optional field, used to set maximum trade stake to be copied
     * @param {Number} args.min_trade_stake - Optional field, used to set minimal trade stake to be copied
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Any} args.trade_types - Optional field, used to set trade types to be copied. E.x ["CALL", "PUT"]
     */
    copyStart(args = {}) {
        const config = {
            assets    : {},
            copy_start: {
                required: 1,
                type    : 'string',
            },
            max_trade_stake: {
                type: 'numeric',
            },
            min_trade_stake: {
                type: 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            trade_types: {},
        };

        const allArgs = {
            method        : 'copy_start',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.copy_stop - API tokens identifying the accounts which needs not to be copied
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    copyStop(args = {}) {
        const config = {
            copy_stop: {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'copy_stop',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.copytrading_list - Must be 1
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    copytradingList(args = {}) {
        const config = {
            copytrading_list: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'copytrading_list',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.copytrading_statistics - Must be 1.
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {String} args.trader_id - The id of the target trader.
     */
    copytradingStatistics(args = {}) {
        const config = {
            copytrading_statistics: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            trader_id: {
                required: 1,
                type    : 'string',
            },
        };

        const allArgs = {
            method        : 'copytrading_statistics',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.document_format - Document file format
     * @param {String} args.document_id - [Optional] Document ID (required for Passport, Proof of ID and Driver's License)
     * @param {String} args.document_type - Document type
     * @param {Number} args.document_upload - Must be 1
     * @param {String} args.expected_checksum - The checksum of the file to be uploaded
     * @param {String} args.expiration_date - [Optional] Document expiration date (required for Passport, Proof of ID and Driver's License)
     * @param {Number} args.file_size - Document size (should be less than 3MB)
     * @param {Any} args.page_type - Optional field to determine document side
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    documentUpload(args = {}) {
        const config = {
            document_format: {
                required: 1,
            },
            document_id: {
                type: 'string',
            },
            document_type: {
                required: 1,
                type    : 'string',
            },
            document_upload: {
                required: 1,
                type    : 'numeric',
            },
            expected_checksum: {
                required: 1,
                type    : 'string',
            },
            expiration_date: {
                type: 'string',
            },
            file_size: {
                required: 1,
                type    : 'numeric',
            },
            page_type  : {},
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'document_upload',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.base_currency - Base currency (can be obtained from payout_currencies call)
     * @param {Number} args.exchange_rates - Must be 1
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     */
    exchangeRates(args = {}) {
        const config = {
            base_currency: {
                required: 1,
                type    : 'string',
            },
            exchange_rates: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'exchange_rates',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.forget - ID of the real-time stream of messages to cancel.
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     */
    forget(args = {}) {
        const config = {
            forget: {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'forget',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.forget_all - Cancel all streams by type (it can be a single string e.g. 'ticks', or an array of multiple values, e.g. ['ticks', 'candles']). Possible values are: 'ticks', 'candles', 'proposal', 'proposal_open_contract', 'balance', 'transaction', 'proposal_array', 'website_status'.
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     */
    forgetAll(args = {}) {
        const config = {
            forget_all: {
                required: 1,
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'forget_all',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.get_account_status - Must be 1
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    getAccountStatus(args = {}) {
        const config = {
            get_account_status: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'get_account_status',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.get_financial_assessment -
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    getFinancialAssessment(args = {}) {
        const config = {
            get_financial_assessment: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'get_financial_assessment',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.get_limits - Must be 1
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    getLimits(args = {}) {
        const config = {
            get_limits: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'get_limits',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.get_self_exclusion - Must be 1
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    getSelfExclusion(args = {}) {
        const config = {
            get_self_exclusion: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'get_self_exclusion',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.get_settings - Must be 1
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    getSettings(args = {}) {
        const config = {
            get_settings: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'get_settings',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.landing_company - Client's 2-letter country code (obtained from residence_list call).
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     */
    landingCompany(args = {}) {
        const config = {
            landing_company: {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'landing_company',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.landing_company_details - Landing company shortcode.
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     */
    landingCompanyDetails(args = {}) {
        const config = {
            landing_company_details: {
                required: 1,
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'landing_company_details',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.limit - Apply limit to count of login history records, default to 10. Max:50
     * @param {Number} args.login_history - Must be 1.
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    loginHistory(args = {}) {
        const config = {
            limit: {
                type: 'numeric',
            },
            login_history: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'login_history',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.logout - Must be 1
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    logout(args = {}) {
        const config = {
            logout: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'logout',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.amount - Amount to deposit (in the currency of from_binary); min = $1 or an equivalent amount, max = $20000 or an equivalent amount
     * @param {String} args.from_binary - Binary account loginid to transfer money from
     * @param {Number} args.mt5_deposit -
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {String} args.to_mt5 - MT5 account login to deposit money to
     */
    mt5Deposit(args = {}) {
        const config = {
            amount: {
                type: 'numeric',
            },
            from_binary: {
                type: 'string',
            },
            mt5_deposit: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            to_mt5: {
                required: 1,
                type    : 'string',
            },
        };

        const allArgs = {
            method        : 'mt5_deposit',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.login - MT5 user login
     * @param {Number} args.mt5_get_settings - Must be 1
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    mt5GetSettings(args = {}) {
        const config = {
            login: {
                required: 1,
                type    : 'string',
            },
            mt5_get_settings: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'mt5_get_settings',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.mt5_login_list - Must be 1
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    mt5LoginList(args = {}) {
        const config = {
            mt5_login_list: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'mt5_login_list',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.action - [Optional] Pass this if you want to revoke current manager assigned to mt5 account
     * @param {String} args.login - MT5 user login
     * @param {Number} args.mt5_mamm -
     * @param {Any} args.passthrough - [Optional] field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] field to map request to response
     */
    mt5Mamm(args = {}) {
        const config = {
            action: {},
            login : {
                required: 1,
                type    : 'string',
            },
            mt5_mamm: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'mt5_mamm',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.account_type - Account type
     * @param {String} args.address - [Optional] The address of the user. The maximum length of this address field is 128 characters.
     * @param {String} args.city - [Optional] User's city of residence.
     * @param {String} args.company - [Optional] Name of the client's company. The maximum length of the company name is 64 characters.
     * @param {String} args.country - [Optional] 2-letter country code (value received from residence_list call).
     * @param {String} args.email - Email address
     * @param {String} args.investPassword - The investor password of the account. The password must contain at least two of three types of characters (lower case, upper case and digits) and meet the minimum length requirements set for the group. This field is required.
     * @param {String} args.leverage - Client leverage (from 1 to 1000).
     * @param {String} args.mainPassword - the master password of the account. The password must contain at least two of three types of characters (lower case, upper case and digits) and meet the minimum length requirements set for the group. This field is required.
     * @param {Number} args.manager_id - [Optional] Login id of manager whom you want to assign to manage your assets, applicable for MT5 Multiple Accounts Manager only.
     * @param {Any} args.mt5_account_type - Standard: Variable spreads, High leverage. Advanced: Variable spreads, Medium Leverage, more products.
     * @param {Number} args.mt5_new_account - Must be 1
     * @param {String} args.name - Client's name. The maximum length here is 101 characters.
     * @param {Any} args.passthrough - [Optional] field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {String} args.phone - [Optional] User's phone number. Max length 50.
     * @param {String} args.phonePassword - the user's phone password. Max length 50.
     * @param {Number} args.req_id - [Optional] field to map request to response
     * @param {String} args.state - [Optional] User's state (region) of residence.
     * @param {String} args.zipCode - [Optional] User's zip code. Max length 50.
     */
    mt5NewAccount(args = {}) {
        const config = {
            account_type: {
                required: 1,
            },
            address: {
                type: 'string',
            },
            city: {
                type: 'string',
            },
            company: {
                type: 'string',
            },
            country: {
                type: 'string',
            },
            email: {
                required: 1,
                type    : 'string',
            },
            investPassword: {
                required: 1,
                type    : 'string',
            },
            leverage: {
                required: 1,
                type    : 'string',
            },
            mainPassword: {
                required: 1,
                type    : 'string',
            },
            manager_id: {
                type: 'numeric',
            },
            mt5_account_type: {},
            mt5_new_account : {
                required: 1,
                type    : 'numeric',
            },
            name: {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            phone      : {
                type: 'string',
            },
            phonePassword: {
                type: 'string',
            },
            req_id: {
                type: 'numeric',
            },
            state: {
                type: 'string',
            },
            zipCode: {
                type: 'string',
            },
        };

        const allArgs = {
            method        : 'mt5_new_account',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.login - MT5 user login
     * @param {Number} args.mt5_password_change - Must be 1
     * @param {String} args.new_password - New password (length within 8-25 chars, accepts any printable ASCII character)
     * @param {String} args.old_password - Old password for validation (non-empty string, accepts any printable ASCII character)
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Any} args.password_type - Password type main/investor (default: main)
     * @param {Number} args.req_id - Optional field to map request to response
     */
    mt5PasswordChange(args = {}) {
        const config = {
            login: {
                required: 1,
                type    : 'string',
            },
            mt5_password_change: {
                required: 1,
                type    : 'numeric',
            },
            new_password: {
                required: 1,
                type    : 'string',
            },
            old_password: {
                required: 1,
                type    : 'string',
            },
            passthrough  : {},
            password_type: {},
            req_id       : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'mt5_password_change',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.login - MT5 user login
     * @param {Number} args.mt5_password_check - Must be 1
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {String} args.password - the password of the account.
     * @param {Any} args.password_type - the password type main/investor (default: main)
     * @param {Number} args.req_id - Optional field to map request to response
     */
    mt5PasswordCheck(args = {}) {
        const config = {
            login: {
                required: 1,
                type    : 'string',
            },
            mt5_password_check: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            password   : {
                required: 1,
                type    : 'string',
            },
            password_type: {},
            req_id       : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'mt5_password_check',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.login - MT5 user login
     * @param {Number} args.mt5_password_reset - Must be 1
     * @param {String} args.new_password - New password of the account (length within 8-25 chars, accepts any printable ASCII character).
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {String} args.password_type - Password type main/investor (default: main)
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {String} args.verification_code - Email verification code (received from a verify_email call, which must be done first)
     */
    mt5PasswordReset(args = {}) {
        const config = {
            login: {
                required: 1,
                type    : 'string',
            },
            mt5_password_reset: {
                required: 1,
                type    : 'numeric',
            },
            new_password: {
                required: 1,
                type    : 'string',
            },
            passthrough  : {},
            password_type: {
                type: 'string',
            },
            req_id: {
                type: 'numeric',
            },
            verification_code: {
                required: 1,
                type    : 'string',
            },
        };

        const allArgs = {
            method        : 'mt5_password_reset',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.amount - Amount to withdraw (in the currency of the MT5 account); min = $1 or an equivalent amount, max = $20000 or an equivalent amount.
     * @param {String} args.from_mt5 - MT5 account login to withdraw money from
     * @param {Number} args.mt5_withdrawal -
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {String} args.to_binary - Binary account loginid to transfer money to
     */
    mt5Withdrawal(args = {}) {
        const config = {
            amount: {
                required: 1,
                type    : 'numeric',
            },
            from_mt5: {
                required: 1,
                type    : 'string',
            },
            mt5_withdrawal: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            to_binary: {
                required: 1,
                type    : 'string',
            },
        };

        const allArgs = {
            method        : 'mt5_withdrawal',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.accept_risk - Show whether client has accepted risk disclaimer, boolean value 1 or 0
     * @param {String} args.account_opening_reason - Purpose and reason for requesting the account opening
     * @param {Any} args.account_turnover - The anticipated account turnover
     * @param {String} args.address_city - Within 35 characters
     * @param {String} args.address_line_1 - Within 70 characters.
     * @param {String} args.address_line_2 - Optional field, within 70 characters.
     * @param {String} args.address_postcode - Optional field, within 20 characters and may not contain '+'.
     * @param {String} args.address_state - Optional field, possible value receive from states_list call.
     * @param {String} args.affiliate_token - Affiliate token, within 32 characters.
     * @param {Any} args.binary_options_trading_experience - Binary options trading experience
     * @param {Any} args.binary_options_trading_frequency - Binary options trading frequency
     * @param {Any} args.cfd_trading_experience - CFDs trading experience
     * @param {Any} args.cfd_trading_frequency - CFDs trading frequency
     * @param {String} args.citizen - Country of legal citizenship, 2-letter country code.
     * @param {Any} args.client_type - Optional field, indicates whether this is for a client requesting an account with professional status. Defaults to retail.
     * @param {String} args.date_of_birth - Date of birth format: yyyy-mm-dd.
     * @param {Any} args.education_level - Level of Education
     * @param {Any} args.employment_industry - Industry of Employment
     * @param {Any} args.employment_status - Employment Status
     * @param {Any} args.estimated_worth - Estimated Net Worth
     * @param {String} args.first_name - Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
     * @param {Any} args.forex_trading_experience - Forex trading experience
     * @param {Any} args.forex_trading_frequency - Forex trading frequency
     * @param {Any} args.income_source - Income Source
     * @param {String} args.last_name - Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
     * @param {Any} args.net_income - Net Annual Income
     * @param {Number} args.new_account_maltainvest - Must be 1
     * @param {Any} args.occupation - Occupation
     * @param {Any} args.other_instruments_trading_experience - Trading experience in other financial instruments
     * @param {Any} args.other_instruments_trading_frequency - Trading frequency in other financial instruments
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {String} args.phone - Within 8-35 digits, allowing '+' in front, numbers, hyphens or space.
     * @param {String} args.place_of_birth - Place of birth, 2-letter country code.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {String} args.residence - 2-letter country code, possible value receive from residence_list call.
     * @param {Any} args.salutation - Accept any value in enum list.
     * @param {String} args.secret_answer - Answer to secret question, within 4-50 characters.
     * @param {Any} args.secret_question - Accept any value in enum list.
     * @param {Any} args.source_of_wealth - Source of wealth
     * @param {String} args.tax_identification_number - Tax identification number. Only applicable for real money account. Required for maltainvest landing company.
     * @param {String} args.tax_residence - Residence for tax purpose. Comma separated iso country code if multiple jurisdictions. Only applicable for real money account. Required for maltainvest landing company.
     */
    newAccountMaltainvest(args = {}) {
        const config = {
            accept_risk: {
                required: 1,
                type    : 'numeric',
            },
            account_opening_reason: {
                type: 'string',
            },
            account_turnover: {},
            address_city    : {
                required: 1,
                type    : 'string',
            },
            address_line_1: {
                required: 1,
                type    : 'string',
            },
            address_line_2: {
                type: 'string',
            },
            address_postcode: {
                type: 'string',
            },
            address_state: {
                type: 'string',
            },
            affiliate_token: {
                type: 'string',
            },
            binary_options_trading_experience: {},
            binary_options_trading_frequency : {},
            cfd_trading_experience           : {},
            cfd_trading_frequency            : {},
            citizen                          : {
                type: 'string',
            },
            client_type  : {},
            date_of_birth: {
                required: 1,
                type    : 'string',
            },
            education_level: {
                required: 1,
            },
            employment_industry: {
                required: 1,
            },
            employment_status: {},
            estimated_worth  : {
                required: 1,
            },
            first_name: {
                required: 1,
                type    : 'string',
            },
            forex_trading_experience: {},
            forex_trading_frequency : {},
            income_source           : {
                required: 1,
            },
            last_name: {
                required: 1,
                type    : 'string',
            },
            net_income: {
                required: 1,
            },
            new_account_maltainvest: {
                required: 1,
                type    : 'numeric',
            },
            occupation: {
                required: 1,
            },
            other_instruments_trading_experience: {},
            other_instruments_trading_frequency : {},
            passthrough                         : {},
            phone                               : {
                required: 1,
                type    : 'string',
            },
            place_of_birth: {
                required: 1,
                type    : 'string',
            },
            req_id: {
                type: 'numeric',
            },
            residence: {
                required: 1,
                type    : 'string',
            },
            salutation: {
                required: 1,
            },
            secret_answer: {
                type: 'string',
            },
            secret_question          : {},
            source_of_wealth         : {},
            tax_identification_number: {
                required: 1,
                type    : 'string',
            },
            tax_residence: {
                required: 1,
                type    : 'string',
            },
        };

        const allArgs = {
            method        : 'new_account_maltainvest',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.account_opening_reason - Purpose and reason for requesting the account opening
     * @param {Any} args.account_turnover - The anticipated account turnover
     * @param {String} args.address_city - Within 35 characters
     * @param {String} args.address_line_1 -
     * @param {String} args.address_line_2 - Optional field, within 70 characters.
     * @param {String} args.address_postcode - Optional field, within 20 characters and may not contain '+'.
     * @param {String} args.address_state - Optional field, possible value receive from states_list call.
     * @param {String} args.affiliate_token - Affiliate token, within 32 characters.
     * @param {Any} args.citizen - Country of legal citizenship, 2-letter country code.
     * @param {Any} args.client_type - Optional field, indicates whether this is for a client requesting an account with professional status. Defaults to retail.
     * @param {Any} args.currency - Optional field to set currency of the account. List of supported currencies can be acquired with 'payout_currencies' call
     * @param {String} args.date_of_birth - Date of birth format: yyyy-mm-dd.
     * @param {String} args.first_name - Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
     * @param {String} args.last_name - Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
     * @param {Number} args.new_account_real - Must be 1
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {String} args.phone - Within 8-35 digits, allowing '+' in front, numbers, hyphens or space.
     * @param {String} args.place_of_birth - Place of birth, 2-letter country code.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {String} args.residence - 2-letter country code, possible value receive from residence_list call.
     * @param {Any} args.salutation - Accept any value in enum list.
     * @param {String} args.secret_answer - Answer to secret question, within 4-50 characters. Required for new account and existing client details will be used if client open another account.
     * @param {Any} args.secret_question - Accept any value in enum list. Required for new account and existing client details will be used if client open another account.
     * @param {String} args.tax_identification_number - Tax identification number. Only applicable for real money account. Required for maltainvest landing company.
     * @param {String} args.tax_residence - Residence for tax purpose. Comma separated iso country code if multiple jurisdictions. Only applicable for real money account. Required for maltainvest landing company.
     */
    newAccountReal(args = {}) {
        const config = {
            account_opening_reason: {
                type: 'string',
            },
            account_turnover: {},
            address_city    : {
                type: 'string',
            },
            address_line_1: {
                type: 'string',
            },
            address_line_2: {
                type: 'string',
            },
            address_postcode: {
                type: 'string',
            },
            address_state: {
                type: 'string',
            },
            affiliate_token: {
                type: 'string',
            },
            citizen      : {},
            client_type  : {},
            currency     : {},
            date_of_birth: {
                required: 1,
                type    : 'string',
            },
            first_name: {
                required: 1,
                type    : 'string',
            },
            last_name: {
                required: 1,
                type    : 'string',
            },
            new_account_real: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            phone      : {
                type: 'string',
            },
            place_of_birth: {
                type: 'string',
            },
            req_id: {
                type: 'numeric',
            },
            residence: {
                required: 1,
                type    : 'string',
            },
            salutation: {
                required: 1,
            },
            secret_answer: {
                type: 'string',
            },
            secret_question          : {},
            tax_identification_number: {
                type: 'string',
            },
            tax_residence: {
                type: 'string',
            },
        };

        const allArgs = {
            method        : 'new_account_real',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.affiliate_token - [Optional] Affiliate token, within 32 characters.
     * @param {String} args.client_password - Password (length within 6-25 chars, accepts any printable ASCII character).
     * @param {String} args.date_first_contact - [Optional] Date of first contact, format: yyyy-mm-dd in GMT timezone.
     * @param {String} args.gclid_url - [Optional] Google Click Identifier to track source.
     * @param {Number} args.new_account_virtual - Must be 1.
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {String} args.residence - 2-letter country code (obtained from residence_list call).
     * @param {Any} args.signup_device - [Optional] Show whether user has used mobile or desktop.
     * @param {String} args.utm_campaign - [Optional] Identifies a specific product promotion or strategic campaign such as a spring sale or other promotions.
     * @param {String} args.utm_medium - [Optional] Identifies the medium the link was used upon such as: email, CPC, or other methods of sharing.
     * @param {String} args.utm_source - [Optional] Identifies the source of traffic such as: search engine, newsletter, or other referral.
     * @param {String} args.verification_code - Email verification code (received from a verify_email call, which must be done first).
     */
    newAccountVirtual(args = {}) {
        const config = {
            affiliate_token: {
                type: 'string',
            },
            client_password: {
                required: 1,
                type    : 'string',
            },
            date_first_contact: {
                type: 'string',
            },
            gclid_url: {
                type: 'string',
            },
            new_account_virtual: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            residence: {
                required: 1,
                type    : 'string',
            },
            signup_device: {},
            utm_campaign : {
                type: 'string',
            },
            utm_medium: {
                type: 'string',
            },
            utm_source: {
                type: 'string',
            },
            verification_code: {
                required: 1,
                type    : 'string',
            },
        };

        const allArgs = {
            method        : 'new_account_virtual',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.category - The category or nature of the event.
     * @param {String} args.event - The name of the event.
     * @param {Number} args.notification_event - Must be 1.
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     */
    notificationEvent(args = {}) {
        const config = {
            category: {
                required: 1,
                type    : 'string',
            },
            event: {
                required: 1,
                type    : 'string',
            },
            notification_event: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
        };

        const allArgs = {
            method        : 'notification_event',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.oauth_apps -
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     */
    oauthApps(args = {}) {
        const config = {
            oauth_apps: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'oauth_apps',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.currency - [Optional] If specified, only payment agents that supports that currency will be returned (obtained from payout_currencies call).
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {String} args.paymentagent_list - Client's 2-letter country code (obtained from residence_list call).
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     */
    paymentagentList(args = {}) {
        const config = {
            currency: {
                type: 'string',
            },
            passthrough      : {},
            paymentagent_list: {
                required: 1,
                type    : 'string',
            },
            req_id: {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'paymentagent_list',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.amount -
     * @param {String} args.currency -
     * @param {String} args.description - Optional field for remarks about the transfer.
     * @param {Number} args.dry_run - If 1, just do validation
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.paymentagent_transfer -
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {String} args.transfer_to - The transfer_to loginid
     */
    paymentagentTransfer(args = {}) {
        const config = {
            amount: {
                required: 1,
                type    : 'numeric',
            },
            currency: {
                required: 1,
                type    : 'string',
            },
            description: {
                type: 'string',
            },
            dry_run: {
                type: 'numeric',
            },
            passthrough          : {},
            paymentagent_transfer: {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            transfer_to: {
                required: 1,
                type    : 'string',
            },
        };

        const allArgs = {
            method        : 'paymentagent_transfer',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.amount -
     * @param {String} args.currency -
     * @param {String} args.description - Optional field for remarks about the withdraw. Only letters, numbers, space, period, comma, - ' are allowed.
     * @param {Number} args.dry_run - If 1, just do validation
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {String} args.paymentagent_loginid - The payment agent loginid received from the paymentagent_list call
     * @param {Number} args.paymentagent_withdraw -
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {String} args.verification_code - Email verification code (received from a verify_email call, which must be done first)
     */
    paymentagentWithdraw(args = {}) {
        const config = {
            amount: {
                required: 1,
                type    : 'numeric',
            },
            currency: {
                required: 1,
                type    : 'string',
            },
            description: {
                type: 'string',
            },
            dry_run: {
                type: 'numeric',
            },
            passthrough         : {},
            paymentagent_loginid: {
                required: 1,
                type    : 'string',
            },
            paymentagent_withdraw: {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            verification_code: {
                required: 1,
                type    : 'string',
            },
        };

        const allArgs = {
            method        : 'paymentagent_withdraw',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.payout_currencies - Must be 1.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     */
    payoutCurrencies(args = {}) {
        const config = {
            passthrough      : {},
            payout_currencies: {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'payout_currencies',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.ping - Must be 1.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     */
    ping(args = {}) {
        const config = {
            passthrough: {},
            ping       : {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'ping',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.portfolio - Must be 1
     * @param {Number} args.req_id - Optional field to map request to response
     */
    portfolio(args = {}) {
        const config = {
            passthrough: {},
            portfolio  : {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'portfolio',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.date_from - Optional start date (epoch or YYYY-MM-DD)
     * @param {String} args.date_to - Optional end date (epoch or YYYY-MM-DD)
     * @param {Number} args.description - If set to 1, will return full contracts description.
     * @param {Number} args.limit - Apply upper limit to count of transactions received
     * @param {Number} args.offset - Skip this many transactions
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.profit_table - Must be 1.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {String} args.sort - sort direction, default DESC
     */
    profitTable(args = {}) {
        const config = {
            date_from: {
                type: 'string',
            },
            date_to: {
                type: 'string',
            },
            description: {
                type: 'numeric',
            },
            limit: {
                type: 'numeric',
            },
            offset: {
                type: 'numeric',
            },
            passthrough : {},
            profit_table: {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            sort: {
                type: 'string',
            },
        };

        const allArgs = {
            method        : 'profit_table',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.amount - Proposed contract payout or stake, or multiplier (for lookbacks).
     * @param {String} args.barrier - Barrier for the contract (or last digit prediction for digit contracts). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Volatility Indices as they support both relative and absolute barriers. Not needed for lookbacks.
     * @param {String} args.barrier2 - Low barrier for the contract (for contracts with two barriers). Contracts less than 24 hours in duration would need a relative barrier (barriers which need +/-), where entry spot would be adjusted accordingly with that amount to define a barrier, except for Volatility Indices as they support both relative and absolute barriers. Not needed for lookbacks.
     * @param {Any} args.basis - Indicates whether amount is 'payout' or 'stake' for binary options, and 'multiplier' for lookbacks.
     * @param {Any} args.contract_type - The proposed contract type
     * @param {String} args.currency - This can only be the account-holder's currency (obtained from payout_currencies call).
     * @param {Number} args.date_expiry - Epoch value of the expiry time of the contract. Either date_expiry or duration is required.
     * @param {Number} args.date_start - [Optional] Indicates epoch value of the starting time of the contract. If left empty, the start time of the contract is now.
     * @param {Number} args.duration - Duration quantity. Either date_expiry or duration is required.
     * @param {Any} args.duration_unit - [Optional] Duration unit - s(seconds), m(minutes), h(hours), d(days), t(ticks).
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Any} args.product_type - The product type.
     * @param {Number} args.proposal - Must be 1.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {Number} args.selected_tick - The tick that is predicted to have the highest/lowest value - for tickhigh and ticklow contracts.
     * @param {Any} args.subscribe - [Optional] 1 - to initiate a realtime stream of prices. Note that tick trades (without a user-defined barrier), digit trades and less than 24 hours at-the-money contracts for the following underlying symbols are not streamed: R_10, R_25, R_50, R_75, R_100, RDBULL, RDBEAR (this is because their price is constant).
     * @param {String} args.symbol - The short symbol name (obtained from active_symbols call).
     * @param {Number} args.trading_period_start - Required only for multi-barrier trading. Defines the epoch value of the trading period start time.
     */
    proposal(args = {}) {
        const config = {
            amount: {
                required: 1,
                type    : 'numeric',
            },
            barrier: {
                type: 'string',
            },
            barrier2: {
                type: 'string',
            },
            basis: {
                required: 1,
            },
            contract_type: {
                required: 1,
            },
            currency: {
                required: 1,
                type    : 'string',
            },
            date_expiry: {
                type: 'numeric',
            },
            date_start: {
                type: 'numeric',
            },
            duration: {
                type: 'numeric',
            },
            duration_unit: {},
            passthrough  : {},
            product_type : {},
            proposal     : {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            selected_tick: {
                type: 'numeric',
            },
            subscribe: {},
            symbol   : {
                required: 1,
                type    : 'string',
            },
            trading_period_start: {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'proposal',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.amount - Proposed contract payout or stake value.
     * @param {Any} args.barriers - Array of barrier(s) for the contract.
     * @param {Any} args.basis - Indicate whether amount is 'payout' or 'stake'.
     * @param {Any} args.contract_type - One or two valid contract-types.
     * @param {String} args.currency - This can only be the account-holder's currency.
     * @param {Number} args.date_expiry - Epoch value of the expiry time of the contract. You must either specify date_expiry or duration.
     * @param {Number} args.date_start - [Optional] Indicates epoch value of the starting time of the contract. If left empty, the start time of the contract is now.
     * @param {Number} args.duration - Duration quantity.
     * @param {Any} args.duration_unit - [Optional] Duration unit - s(seconds), m(minutes), h(hours), d(days), t(ticks).
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Any} args.product_type - [Optional] If you specify this field, only contracts tradable through that contract type will be returned.
     * @param {Number} args.proposal_array - Must be 1.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {Any} args.subscribe - [Optional] 1 - to initiate a realtime stream of prices. Note that tick trades (without a user-defined barrier), digit trades and less than 24 hours at-the-money contracts for the following underlying symbols are not streamed: R_10, R_25, R_50, R_75, R_100, RDBULL, RDBEAR (this is because their price is constant).
     * @param {String} args.symbol - Symbol code.
     * @param {Number} args.trading_period_start - Required only for multi-barrier trading. Defines the epoch value of the trading period start time.
     */
    proposalArray(args = {}) {
        const config = {
            amount: {
                required: 1,
                type    : 'numeric',
            },
            barriers: {
                required: 1,
            },
            basis: {
                required: 1,
            },
            contract_type: {
                required: 1,
            },
            currency: {
                required: 1,
                type    : 'string',
            },
            date_expiry: {
                type: 'numeric',
            },
            date_start: {
                type: 'numeric',
            },
            duration: {
                type: 'numeric',
            },
            duration_unit : {},
            passthrough   : {},
            product_type  : {},
            proposal_array: {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            subscribe: {},
            symbol   : {
                required: 1,
                type    : 'string',
            },
            trading_period_start: {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'proposal_array',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.contract_id - Contract id received from a Portfolio request. If not set, you will receive stream of all open contracts.
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Any} args.proposal_open_contract - Must be 1
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Number} args.subscribe - 1 - to stream
     */
    proposalOpenContract(args = {}) {
        const config = {
            contract_id: {
                type: 'numeric',
            },
            passthrough           : {},
            proposal_open_contract: {
                required: 1,
            },
            req_id: {
                type: 'numeric',
            },
            subscribe: {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'proposal_open_contract',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.reality_check - Must be 1
     * @param {Number} args.req_id - Optional field to map request to response
     */
    realityCheck(args = {}) {
        const config = {
            passthrough  : {},
            reality_check: {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'reality_check',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.date_from - Start date of the report
     * @param {Number} args.date_to - End date of the report
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field
     * @param {String} args.report_type - Type of report to be sent to client's registered e-mail address
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Number} args.request_report - Must be 1.
     */
    requestReport(args = {}) {
        const config = {
            date_from: {
                required: 1,
                type    : 'numeric',
            },
            date_to: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            report_type: {
                required: 1,
                type    : 'string',
            },
            req_id: {
                type: 'numeric',
            },
            request_report: {
                required: 1,
                type    : 'numeric',
            },
        };

        const allArgs = {
            method        : 'request_report',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.date_of_birth - Date of birth format: yyyy-mm-dd. Only required for clients with real-money accounts.
     * @param {String} args.new_password - New password for validation (length within 6-25 chars, accepts any printable ASCII characters, need to include capital and lowercase letters with numbers). Password strength is evaluated with: http://archive.geekwisdom.com/js/passwordmeter.js
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Number} args.reset_password -
     * @param {String} args.verification_code - Email verification code (received from a verify_email call, which must be done first)
     */
    resetPassword(args = {}) {
        const config = {
            date_of_birth: {
                type: 'string',
            },
            new_password: {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            reset_password: {
                required: 1,
                type    : 'numeric',
            },
            verification_code: {
                required: 1,
                type    : 'string',
            },
        };

        const allArgs = {
            method        : 'reset_password',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {Number} args.residence_list - Must be 1.
     */
    residenceList(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            residence_list: {
                required: 1,
                type    : 'numeric',
            },
        };

        const allArgs = {
            method        : 'residence_list',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Number} args.revoke_oauth_app -
     */
    revokeOauthApp(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            revoke_oauth_app: {
                required: 1,
                type    : 'numeric',
            },
        };

        const allArgs = {
            method        : 'revoke_oauth_app',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.price - Minimum price at which to sell the contract, or '0' for 'sell at market'
     * @param {Number} args.req_id - Optional field send in request to map to response, present only when request contains req_id
     * @param {Number} args.sell - Pass contract_id received from the Portfolio call
     */
    sell(args = {}) {
        const config = {
            passthrough: {},
            price      : {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            sell: {
                required: 1,
                type    : 'numeric',
            },
        };

        const allArgs = {
            method        : 'sell',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - Optional field used to pass data through the websocket API. May be retrieved via the echo_req output field.
     * @param {Number} args.price - Minimum price at which to sell the contract, or '0' for 'sell at market'
     * @param {Number} args.req_id - Optional field send in request to map to response, present only when request contains req_id
     * @param {Number} args.sell_contract_for_multiple_accounts -
     * @param {String} args.shortcode - An internal ID used to identify the contract which was originally bought. This is returned from the buy and buy_for_multiple_accounts calls
     * @param {Any} args.tokens - Authorisation tokens which select the accounts to sell use for the affected accounts
     */
    sellContractForMultipleAccounts(args = {}) {
        const config = {
            passthrough: {},
            price      : {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            sell_contract_for_multiple_accounts: {
                required: 1,
                type    : 'numeric',
            },
            shortcode: {
                required: 1,
                type    : 'string',
            },
            tokens: {
                required: 1,
            },
        };

        const allArgs = {
            method        : 'sell_contract_for_multiple_accounts',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Number} args.sell_expired - Must be 1.
     */
    sellExpired(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            sell_expired: {
                required: 1,
                type    : 'numeric',
            },
        };

        const allArgs = {
            method        : 'sell_expired',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {String} args.referrer - The URL of the web page where the Web SDK will be used.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {String} args.service - The service name to retrieve the token for.
     * @param {Number} args.service_token - Must be 1.
     */
    serviceToken(args = {}) {
        const config = {
            passthrough: {},
            referrer   : {
                type: 'string',
            },
            req_id: {
                type: 'numeric',
            },
            service: {
                required: 1,
                type    : 'string',
            },
            service_token: {
                required: 1,
                type    : 'numeric',
            },
        };

        const allArgs = {
            method        : 'service_token',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Any} args.set_account_currency - Currency of the account. List of supported currencies can be acquired with 'payout_currencies' call
     */
    setAccountCurrency(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            set_account_currency: {
                required: 1,
            },
        };

        const allArgs = {
            method        : 'set_account_currency',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.account_turnover - The anticipated account turnover
     * @param {Any} args.binary_options_trading_experience - Binary options trading experience
     * @param {Any} args.binary_options_trading_frequency - Binary options trading frequency
     * @param {Any} args.cfd_trading_experience - CFDs trading experience
     * @param {Any} args.cfd_trading_frequency - CFDs trading frequency
     * @param {Any} args.education_level - Level of Education
     * @param {Any} args.employment_industry - Industry of Employment
     * @param {Any} args.employment_status - Employment Status
     * @param {Any} args.estimated_worth - Estimated Net Worth
     * @param {Any} args.forex_trading_experience - Forex trading experience
     * @param {Any} args.forex_trading_frequency - Forex trading frequency
     * @param {Any} args.income_source - Income Source
     * @param {Any} args.net_income - Net Annual Income
     * @param {Any} args.occupation - Occupation
     * @param {Any} args.other_instruments_trading_experience - Trading experience in other financial instruments
     * @param {Any} args.other_instruments_trading_frequency - Trading frequency in other financial instruments
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Number} args.set_financial_assessment - Must be 1
     * @param {Any} args.source_of_wealth - Source of wealth
     */
    setFinancialAssessment(args = {}) {
        const config = {
            account_turnover                 : {},
            binary_options_trading_experience: {},
            binary_options_trading_frequency : {},
            cfd_trading_experience           : {},
            cfd_trading_frequency            : {},
            education_level                  : {
                required: 1,
            },
            employment_industry: {
                required: 1,
            },
            employment_status: {},
            estimated_worth  : {
                required: 1,
            },
            forex_trading_experience: {},
            forex_trading_frequency : {},
            income_source           : {
                required: 1,
            },
            net_income: {
                required: 1,
            },
            occupation: {
                required: 1,
            },
            other_instruments_trading_experience: {},
            other_instruments_trading_frequency : {},
            passthrough                         : {},
            req_id                              : {
                type: 'numeric',
            },
            set_financial_assessment: {
                required: 1,
                type    : 'numeric',
            },
            source_of_wealth: {},
        };

        const allArgs = {
            method        : 'set_financial_assessment',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.exclude_until - Exclude me from the website (for a minimum of 6 months, up to a maximum of 5 years). Note: uplifting this self-exclusion may require contacting the company.
     * @param {Any} args.max_30day_losses - 30-day limit on losses
     * @param {Any} args.max_30day_turnover - 30-day turnover limit
     * @param {Any} args.max_7day_losses - 7-day limit on losses
     * @param {Any} args.max_7day_turnover - 7-day turnover limit
     * @param {Any} args.max_balance - Maximum account cash balance
     * @param {Any} args.max_deposit - Deposit limit.
     * @param {Any} args.max_deposit_end_date - Exclude me from making deposits when the cumulative sum of deposits exceeds specified deposit limit.
     * @param {Any} args.max_losses - Daily limit on losses
     * @param {Any} args.max_open_bets - Maximum number of open positions
     * @param {Any} args.max_turnover - Daily turnover limit
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Any} args.session_duration_limit - Session duration limit, in minutes
     * @param {Number} args.set_self_exclusion -
     * @param {Any} args.timeout_until - Exclude me from the website (for up to 6 weeks). Requires time in epoch format. Note: unlike exclude_until, this self-exclusion will be lifted automatically at the expiry of the timeout period.
     */
    setSelfExclusion(args = {}) {
        const config = {
            exclude_until       : {},
            max_30day_losses    : {},
            max_30day_turnover  : {},
            max_7day_losses     : {},
            max_7day_turnover   : {},
            max_balance         : {},
            max_deposit         : {},
            max_deposit_end_date: {},
            max_losses          : {},
            max_open_bets       : {},
            max_turnover        : {},
            passthrough         : {},
            req_id              : {
                type: 'numeric',
            },
            session_duration_limit: {},
            set_self_exclusion    : {
                required: 1,
                type    : 'numeric',
            },
            timeout_until: {},
        };

        const allArgs = {
            method        : 'set_self_exclusion',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.account_opening_reason - Purpose and reason for requesting the account opening. Only applicable for real money account. Required for clients that have not set it yet. Can only be set once.
     * @param {String} args.address_city - Note: not applicable for virtual account. Required field for real money account.
     * @param {String} args.address_line_1 - Note: not applicable for virtual account. Required field for real money account.
     * @param {Any} args.address_line_2 - Note: not applicable for virtual account. Optional field for real money account.
     * @param {String} args.address_postcode - Note: not applicable for virtual account. Optional field for real money account.
     * @param {String} args.address_state - Note: not applicable for virtual account. Optional field for real money account.
     * @param {Number} args.allow_copiers - Boolean value 1 or 0, indicating permission to allow others to follow your trades. Note: not applicable for Virtual account. Only allow for real money account.
     * @param {Any} args.citizen - Country of legal citizenship, 2-letter country code.
     * @param {String} args.date_of_birth - Date of birth format: yyyy-mm-dd (can only be changed on unauthenticated svg accounts).
     * @param {Number} args.email_consent - Boolean value 1 or 0, indicating permission to use email address for any contact which may include marketing
     * @param {String} args.first_name - Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes (can only be changed on unauthenticated svg accounts).
     * @param {String} args.last_name - Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes (can only be changed on unauthenticated svg accounts).
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Any} args.phone - Note: not applicable for virtual account. Required field for real money account and within 8-35 digits, allowing '+' in front, numbers, hyphens or space.
     * @param {String} args.place_of_birth - Place of birth, 2-letter country code.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Number} args.request_professional_status - Required when client wants to be treated as professional. Applicable for financial accounts only.
     * @param {Any} args.residence - 2-letter country code. Note: not applicable for real money account. Only allow for Virtual account without residence set.
     * @param {Any} args.salutation - Accept any value in enum list (can only be changed on unauthenticated svg accounts).
     * @param {String} args.secret_answer - Answer to secret question, within 4-50 characters. Required for new account and existing client details will be used if client opens another account.
     * @param {Any} args.secret_question - Accept any value in enum list. Required for new account and existing client details will be used if client opens another account.
     * @param {Number} args.set_settings -
     * @param {String} args.tax_identification_number - Tax identification number. Only applicable for real money account. Required for maltainvest landing company.
     * @param {String} args.tax_residence - Residence for tax purpose. Comma separated iso country code if multiple jurisdictions. Only applicable for real money account. Required for maltainvest landing company.
     */
    setSettings(args = {}) {
        const config = {
            account_opening_reason: {
                type: 'string',
            },
            address_city: {
                type: 'string',
            },
            address_line_1: {
                type: 'string',
            },
            address_line_2  : {},
            address_postcode: {
                type: 'string',
            },
            address_state: {
                type: 'string',
            },
            allow_copiers: {
                type: 'numeric',
            },
            citizen      : {},
            date_of_birth: {
                type: 'string',
            },
            email_consent: {
                type: 'numeric',
            },
            first_name: {
                type: 'string',
            },
            last_name: {
                type: 'string',
            },
            passthrough   : {},
            phone         : {},
            place_of_birth: {
                type: 'string',
            },
            req_id: {
                type: 'numeric',
            },
            request_professional_status: {
                type: 'numeric',
            },
            residence    : {},
            salutation   : {},
            secret_answer: {
                type: 'string',
            },
            secret_question: {},
            set_settings   : {
                required: 1,
                type    : 'numeric',
            },
            tax_identification_number: {
                type: 'string',
            },
            tax_residence: {
                type: 'string',
            },
        };

        const allArgs = {
            method        : 'set_settings',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.action_type - Optional filter for statement (deposit,withdrawal,buy,sell)
     * @param {Number} args.date_from - Optional start date (epoch)
     * @param {Number} args.date_to - Optional end date (epoch)
     * @param {Number} args.description - If set to 1, will return full contracts description.
     * @param {Number} args.limit - Apply upper limit to count of transactions received
     * @param {Number} args.offset - Skip this many transactions
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Number} args.statement - Must be 1.
     */
    statement(args = {}) {
        const config = {
            action_type: {
                type: 'string',
            },
            date_from: {
                type: 'numeric',
            },
            date_to: {
                type: 'numeric',
            },
            description: {
                type: 'numeric',
            },
            limit: {
                type: 'numeric',
            },
            offset: {
                type: 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            statement: {
                required: 1,
                type    : 'numeric',
            },
        };

        const allArgs = {
            method        : 'statement',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {String} args.states_list - Client's 2-letter country code (obtained from residence_list call)
     */
    statesList(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            states_list: {
                required: 1,
                type    : 'string',
            },
        };

        const allArgs = {
            method        : 'states_list',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {Any} args.subscribe - If set to 1, will send updates whenever a new tick is received.
     * @param {Any} args.ticks - The short symbol name or array of symbols (obtained from active_symbols call).
     */
    ticks(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            subscribe: {},
            ticks    : {
                required: 1,
            },
        };

        const allArgs = {
            method        : 'ticks',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Number} args.adjust_start_time - [Optional] 1 - if the market is closed at the end time, or license limit is before end time, adjust interval backwards to compensate.
     * @param {Number} args.count - An upper limit on ticks to receive.
     * @param {String} args.end - Epoch value representing the latest boundary of the returned ticks. If "latest" is specified, this will be the latest available timestamp.
     * @param {Number} args.granularity - Only applicable for style : "candles". Candle time-dimension width setting. Allowed values 60, 120, 180, 300, 600, 900, 1800, 3600, 7200, 14400, 28800, 86400 (default: '60').
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {Number} args.start - Epoch value representing the earliest boundary of the returned ticks (For styles: 'ticks', this will default to 1 day ago. For styles: 'candle', it will default to 1 day ago if count or granularity is undefined).
     * @param {Any} args.style - The tick-output style.
     * @param {Any} args.subscribe - [Optional] 1 - to send updates whenever a new tick is received.
     * @param {String} args.ticks_history - Short symbol name (obtained from the active_symbols call).
     */
    ticksHistory(args = {}) {
        const config = {
            adjust_start_time: {
                type: 'numeric',
            },
            count: {
                type: 'numeric',
            },
            end: {
                required: 1,
                type    : 'string',
            },
            granularity: {
                type: 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            start: {
                type: 'numeric',
            },
            style        : {},
            subscribe    : {},
            ticks_history: {
                required: 1,
                type    : 'string',
            },
        };

        const allArgs = {
            method        : 'ticks_history',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {Number} args.time - Must be 1.
     */
    time(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            time: {
                required: 1,
                type    : 'numeric',
            },
        };

        const allArgs = {
            method        : 'time',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Number} args.tnc_approval - Must be 1
     * @param {Number} args.ukgc_funds_protection - for ASK_UK_FUNDS_PROTECTION in cashier
     */
    tncApproval(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            tnc_approval: {
                required: 1,
                type    : 'numeric',
            },
            ukgc_funds_protection: {
                type: 'numeric',
            },
        };

        const allArgs = {
            method        : 'tnc_approval',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Number} args.topup_virtual - it's only allowed for virtual account.
     */
    topupVirtual(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            topup_virtual: {
                required: 1,
                type    : 'numeric',
            },
        };

        const allArgs = {
            method        : 'topup_virtual',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.landing_company - [Optional] If specified, will return only the underlyings for the specified landing company.
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {Number} args.trading_durations - Must be 1.
     */
    tradingDurations(args = {}) {
        const config = {
            landing_company: {},
            passthrough    : {},
            req_id         : {
                type: 'numeric',
            },
            trading_durations: {
                required: 1,
                type    : 'numeric',
            },
        };

        const allArgs = {
            method        : 'trading_durations',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {String} args.trading_times - Date to receive market opening times for. (yyyy-mm-dd format. 'today' can also be specified).
     */
    tradingTimes(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            trading_times: {
                required: 1,
                type    : 'string',
            },
        };

        const allArgs = {
            method        : 'trading_times',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Number} args.subscribe - If set to 1, will send updates whenever there is an update to transactions. If not to 1 then it will not return any records.
     * @param {Any} args.transaction - Must be 1.
     */
    transaction(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            subscribe: {
                required: 1,
                type    : 'numeric',
            },
            transaction: {
                required: 1,
            },
        };

        const allArgs = {
            method        : 'transaction',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {String} args.account_from - The account_from loginid
     * @param {String} args.account_to - The account_to loginid
     * @param {Any} args.accounts - Optional field to control the list of accounts returned when account_from or account_to is not provided. 'Brief' will only include standard trading accounts and can be faster.
     * @param {Number} args.amount -
     * @param {String} args.currency -
     * @param {Any} args.passthrough - Optional field, used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - Optional field to map request to response
     * @param {Number} args.transfer_between_accounts - If account_from or account_to is not provided, we'll just return available accounts.
     */
    transferBetweenAccounts(args = {}) {
        const config = {
            account_from: {
                type: 'string',
            },
            account_to: {
                type: 'string',
            },
            accounts: {},
            amount  : {
                type: 'numeric',
            },
            currency: {
                type: 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            transfer_between_accounts: {
                required: 1,
                type    : 'numeric',
            },
        };

        const allArgs = {
            method        : 'transfer_between_accounts',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {Any} args.type - Purpose of the email verification call.
     * @param {Any} args.url_parameters -
     * @param {String} args.verify_email - Email address to be verified.
     */
    verifyEmail(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            type: {
                required: 1,
            },
            url_parameters: {
                affiliate_token: {
                    type: 'string',
                },
                date_first_contact: {
                    type: 'string',
                },
                gclid_url: {
                    type: 'string',
                },
                signup_device: {},
                utm_campaign : {
                    type: 'string',
                },
                utm_medium: {
                    type: 'string',
                },
                utm_source: {
                    type: 'string',
                },
            },
            verify_email: {
                required: 1,
                type    : 'string',
            },
        };

        const allArgs = {
            method        : 'verify_email',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    /**
     * @param {Object} args
     * @param {Any} args.passthrough - [Optional] Used to pass data through the websocket, which may be retrieved via the echo_req output field.
     * @param {Number} args.req_id - [Optional] Used to map request to response.
     * @param {Any} args.subscribe - [Optional] 1 - to stream the server/website status updates (default = 1)
     * @param {Any} args.website_status - Must be 1.
     */
    websiteStatus(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            subscribe     : {},
            website_status: {
                required: 1,
            },
        };

        const allArgs = {
            method        : 'website_status',
            needsMethodArg: '1',
            args,
            config,
        };

        return this.processRequest(allArgs);
    }

    processRequest(allArgs) {
        const { config } = allArgs;
        const parsedArgs = parseArgs(allArgs);

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }
}

// ==========================
// ----- Helper Methods -----
// ==========================

const isObject = value => value instanceof Object;

const typeCheckers = {
    object : isObject,
    numeric: value => !Number.isNaN(value * 1),
    string : value => typeof value === 'string',
    boolean: value => [true, false, 0, 1].includes(value),
};

function parseArgs({
    config, args, method, needsMethodArg,
}) {
    let parsedArgs = args;

    if (needsMethodArg && !isObject(parsedArgs)) {
        parsedArgs = { [method]: parsedArgs };
    }

    parsedArgs[method] = parsedArgs[method] || 1;

    Object.keys(parsedArgs).forEach((param) => {
        const value = parsedArgs[param];

        if (!(param in config)) return;

        if (config[param].type === 'string') {
            parsedArgs[param] = `${value}`;
        } else if (config[param].type === 'numeric') {
            parsedArgs[param] = parseInt(value, 10);
        } else if (config[param].type === 'boolean') {
            parsedArgs[param] = +value;
        }
    });

    return parsedArgs;
}

function validateArgs({ config, args }) {
    if (!isObject(args)) {
        return `Requires an object but a ${typeof args} is passed.`;
    }

    const errorMessages = [];

    const missing = Object.keys(config).filter(
        key => (config[key] || {}).required && !(key in args),
    );

    if (missing.length) {
        errorMessages.push(`Required parameters missing: ${missing.join(', ')}`);
    }

    Object.keys(args).forEach((param) => {
        const value = args[param];

        if (!(param in config)) return;

        const expectedType = config[param].type;

        if (!expectedType) return;

        if (!typeCheckers[expectedType](value)) {
            errorMessages.push(
                `${expectedType} value expected but found ${typeof value}: ${param}`,
            );
        }
    });

    return errorMessages.length ? errorMessages.join(' - ') : '';
}
