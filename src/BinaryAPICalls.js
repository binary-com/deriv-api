// This file was automatically generated by scripts/regen-js.pl at 20190621-011039
// applies JSON schema to generate binary.com API

// ==========================
// ----- Helper Methods -----
// ==========================

const throwError = (message) => {
    return Promise.reject(message);
};

const isObject  = (value) => value instanceof Object;
const isNumeric = (value) => value !== undefined || !isNaN(value);
const isBoolean = (value) => [true, false, 0, 1].includes(value);

const listErrorParams = (params) => params.map(err => `${err} (${typeof err})`).join(', ');

const checkErrorAndValidate = ({ config, args, call_name }) => {
    if (!isObject(args)) {
        return `Requires an object but a ${typeof args} is passed.`;
    }

    args[call_name] = args[call_name] || 1;
    args.req_id     = args.req_id || ++req_id;

    const error_messages = [];

    const missing = Object.keys(config).filter(key => (config[key] || {}).required && !(key in args));
    if (missing.length) {
        error_messages.push(`Required parameters missing: ${missing.join(', ')}`);
    }

    Object.keys(args).forEach(param => {
        const value = args[param];

        if (!(param in config)) return;

        if (config[param].type === 'string') {
            args[param] = `${value}`;
        }
        else if (config[param].type === 'numeric') {
            if (!isNumeric(value)) {
                error_messages.push(`Numeric value expected but found ${typeof value}: ${param}`);
            }
            args[param] = parseInt(value);
        }
        else if (config[param].type === 'boolean') {
            if (!isBoolean(value)) {
                error_messages.push(`Boolean value expected but found ${typeof value}: ${param}`);
            }
            args[param] = +value;
        }
        else if (config[param].type === 'object' && !isObject(value)) {
            error_messages.push(`Object value expected but found ${typeof value}: ${param}`);
        }
    });

    return error_messages.length ? error_messages.join(' - ') : '';
};

// req_id is initialized once, and is unique for each request
let req_id = 0;


// =======================
// ----- API Methods -----
// =======================

export default class BinaryAPICalls {
    constructor() {
        // To be implemented by the sub-class
    }

    account_closure(args = {}) {
        const config = {
            'account_closure' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'reason' : {
               'required' : 1,
               'type' : 'string'
            },
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'account_closure' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    account_security(args = {}) {
        const config = {
            'account_security' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'otp' : {
               'type' : 'string'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'totp_action' : {}
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'account_security' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    account_statistics(args = {}) {
        const config = {
            'account_statistics' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'account_statistics' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    active_symbols(args = {}) {
        const config = {
            'active_symbols' : {
               'required' : 1
            },
            'landing_company' : {},
            'passthrough' : {},
            'product_type' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'active_symbols' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    api_token(args = {}) {
        const config = {
            'api_token' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'delete_token' : {
               'type' : 'string'
            },
            'new_token' : {
               'type' : 'string'
            },
            'new_token_scopes' : {},
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'valid_for_current_ip_only' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'api_token' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    app_delete(args = {}) {
        const config = {
            'app_delete' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'app_delete' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    app_get(args = {}) {
        const config = {
            'app_get' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'app_get' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    app_list(args = {}) {
        const config = {
            'app_list' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'app_list' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    app_markup_details(args = {}) {
        const config = {
            'app_id' : {
               'type' : 'numeric'
            },
            'app_markup_details' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'client_loginid' : {
               'type' : 'string'
            },
            'date_from' : {
               'required' : 1,
               'type' : 'string'
            },
            'date_to' : {
               'required' : 1,
               'type' : 'string'
            },
            'description' : {
               'type' : 'numeric'
            },
            'limit' : {
               'type' : 'numeric'
            },
            'offset' : {
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'sort' : {
               'type' : 'string'
            },
            'sort_fields' : {}
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'app_markup_details' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    app_register(args = {}) {
        const config = {
            'app_markup_percentage' : {
               'type' : 'numeric'
            },
            'app_register' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'appstore' : {
               'type' : 'string'
            },
            'github' : {
               'type' : 'string'
            },
            'googleplay' : {
               'type' : 'string'
            },
            'homepage' : {
               'type' : 'string'
            },
            'name' : {
               'required' : 1,
               'type' : 'string'
            },
            'passthrough' : {},
            'redirect_uri' : {
               'required' : 1,
               'type' : 'string'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'scopes' : {
               'required' : 1
            },
            'verification_uri' : {
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'app_register' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    app_update(args = {}) {
        const config = {
            'app_markup_percentage' : {
               'type' : 'numeric'
            },
            'app_update' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'appstore' : {
               'type' : 'string'
            },
            'github' : {
               'type' : 'string'
            },
            'googleplay' : {
               'type' : 'string'
            },
            'homepage' : {
               'type' : 'string'
            },
            'name' : {
               'required' : 1,
               'type' : 'string'
            },
            'passthrough' : {},
            'redirect_uri' : {
               'required' : 1,
               'type' : 'string'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'scopes' : {
               'required' : 1
            },
            'verification_uri' : {
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'app_update' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    asset_index(args = {}) {
        const config = {
            'asset_index' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'landing_company' : {},
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'asset_index' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    authorize(args = {}) {
        const config = {
            'add_to_login_history' : {},
            'authorize' : {
               'required' : 1,
               'type' : 'string'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'authorize' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    balance(args = {}) {
        const config = {
            'balance' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'subscribe' : {}
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'balance' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    buy(args = {}) {
        const config = {
            'buy' : {
               'required' : 1,
               'type' : 'string'
            },
            'parameters' : {
               'amount' : {
                  'type' : 'numeric'
               },
               'app_markup_percentage' : {
                  'type' : 'numeric'
               },
               'barrier' : {
                  'type' : 'string'
               },
               'barrier2' : {
                  'type' : 'string'
               },
               'basis' : {},
               'contract_type' : {
                  'required' : 1,
                  'type' : 'string'
               },
               'currency' : {
                  'required' : 1,
                  'type' : 'string'
               },
               'date_expiry' : {
                  'type' : 'numeric'
               },
               'date_start' : {
                  'type' : 'numeric'
               },
               'duration' : {
                  'type' : 'numeric'
               },
               'duration_unit' : {},
               'product_type' : {
                  'type' : 'string'
               },
               'selected_tick' : {
                  'type' : 'numeric'
               },
               'symbol' : {
                  'required' : 1,
                  'type' : 'string'
               },
               'trading_period_start' : {
                  'type' : 'numeric'
               }
            },
            'passthrough' : {},
            'price' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'subscribe' : {}
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'buy' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    buy_contract_for_multiple_accounts(args = {}) {
        const config = {
            'buy_contract_for_multiple_accounts' : {
               'required' : 1,
               'type' : 'string'
            },
            'parameters' : {
               'amount' : {
                  'type' : 'numeric'
               },
               'app_markup_percentage' : {
                  'type' : 'numeric'
               },
               'barrier' : {
                  'type' : 'string'
               },
               'barrier2' : {
                  'type' : 'string'
               },
               'basis' : {},
               'contract_type' : {
                  'required' : 1,
                  'type' : 'string'
               },
               'currency' : {
                  'required' : 1,
                  'type' : 'string'
               },
               'date_expiry' : {
                  'type' : 'numeric'
               },
               'date_start' : {
                  'type' : 'numeric'
               },
               'duration' : {
                  'type' : 'numeric'
               },
               'duration_unit' : {},
               'selected_tick' : {
                  'type' : 'numeric'
               },
               'symbol' : {
                  'required' : 1,
                  'type' : 'string'
               }
            },
            'passthrough' : {},
            'price' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'tokens' : {
               'required' : 1
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'buy_contract_for_multiple_accounts' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    cashier(args = {}) {
        const config = {
            'cashier' : {
               'required' : 1
            },
            'passthrough' : {},
            'provider' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'verification_code' : {
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'cashier' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    cashier_password(args = {}) {
        const config = {
            'cashier_password' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'lock_password' : {
               'type' : 'string'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'unlock_password' : {
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'cashier_password' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    change_password(args = {}) {
        const config = {
            'change_password' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'new_password' : {
               'required' : 1,
               'type' : 'string'
            },
            'old_password' : {
               'required' : 1,
               'type' : 'string'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'change_password' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    contracts_for(args = {}) {
        const config = {
            'contracts_for' : {
               'required' : 1,
               'type' : 'string'
            },
            'currency' : {
               'type' : 'string'
            },
            'landing_company' : {},
            'passthrough' : {},
            'product_type' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'contracts_for' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    copy_start(args = {}) {
        const config = {
            'assets' : {},
            'copy_start' : {
               'required' : 1,
               'type' : 'string'
            },
            'max_trade_stake' : {
               'type' : 'numeric'
            },
            'min_trade_stake' : {
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'trade_types' : {}
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'copy_start' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    copy_stop(args = {}) {
        const config = {
            'copy_stop' : {
               'required' : 1,
               'type' : 'string'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'copy_stop' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    copytrading_list(args = {}) {
        const config = {
            'copytrading_list' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'copytrading_list' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    copytrading_statistics(args = {}) {
        const config = {
            'copytrading_statistics' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'trader_id' : {
               'required' : 1,
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'copytrading_statistics' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    document_upload(args = {}) {
        const config = {
            'document_format' : {
               'required' : 1
            },
            'document_id' : {
               'type' : 'string'
            },
            'document_type' : {
               'required' : 1,
               'type' : 'string'
            },
            'document_upload' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'expected_checksum' : {
               'required' : 1,
               'type' : 'string'
            },
            'expiration_date' : {
               'type' : 'string'
            },
            'file_size' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'page_type' : {},
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'document_upload' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    exchange_rates(args = {}) {
        const config = {
            'base_currency' : {
               'required' : 1,
               'type' : 'string'
            },
            'exchange_rates' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'exchange_rates' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    forget(args = {}) {
        const config = {
            'forget' : {
               'required' : 1,
               'type' : 'string'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'forget' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    forget_all(args = {}) {
        const config = {
            'forget_all' : {
               'required' : 1
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'forget_all' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    get_account_status(args = {}) {
        const config = {
            'get_account_status' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'get_account_status' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    get_financial_assessment(args = {}) {
        const config = {
            'get_financial_assessment' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'get_financial_assessment' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    get_limits(args = {}) {
        const config = {
            'get_limits' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'get_limits' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    get_self_exclusion(args = {}) {
        const config = {
            'get_self_exclusion' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'get_self_exclusion' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    get_settings(args = {}) {
        const config = {
            'get_settings' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'get_settings' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    landing_company(args = {}) {
        const config = {
            'landing_company' : {
               'required' : 1,
               'type' : 'string'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'landing_company' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    landing_company_details(args = {}) {
        const config = {
            'landing_company_details' : {
               'required' : 1
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'landing_company_details' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    login_history(args = {}) {
        const config = {
            'limit' : {
               'type' : 'numeric'
            },
            'login_history' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'login_history' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    logout(args = {}) {
        const config = {
            'logout' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'logout' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    mt5_deposit(args = {}) {
        const config = {
            'amount' : {
               'type' : 'numeric'
            },
            'from_binary' : {
               'type' : 'string'
            },
            'mt5_deposit' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'to_mt5' : {
               'required' : 1,
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'mt5_deposit' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    mt5_get_settings(args = {}) {
        const config = {
            'login' : {
               'required' : 1,
               'type' : 'string'
            },
            'mt5_get_settings' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'mt5_get_settings' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    mt5_login_list(args = {}) {
        const config = {
            'mt5_login_list' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'mt5_login_list' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    mt5_mamm(args = {}) {
        const config = {
            'action' : {},
            'login' : {
               'required' : 1,
               'type' : 'string'
            },
            'mt5_mamm' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'mt5_mamm' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    mt5_new_account(args = {}) {
        const config = {
            'account_type' : {
               'required' : 1
            },
            'address' : {
               'type' : 'string'
            },
            'city' : {
               'type' : 'string'
            },
            'company' : {
               'type' : 'string'
            },
            'country' : {
               'type' : 'string'
            },
            'email' : {
               'required' : 1,
               'type' : 'string'
            },
            'investPassword' : {
               'required' : 1,
               'type' : 'string'
            },
            'leverage' : {
               'required' : 1,
               'type' : 'string'
            },
            'mainPassword' : {
               'required' : 1,
               'type' : 'string'
            },
            'manager_id' : {
               'type' : 'numeric'
            },
            'mt5_account_type' : {},
            'mt5_new_account' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'name' : {
               'required' : 1,
               'type' : 'string'
            },
            'passthrough' : {},
            'phone' : {
               'type' : 'string'
            },
            'phonePassword' : {
               'type' : 'string'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'state' : {
               'type' : 'string'
            },
            'zipCode' : {
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'mt5_new_account' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    mt5_password_change(args = {}) {
        const config = {
            'login' : {
               'required' : 1,
               'type' : 'string'
            },
            'mt5_password_change' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'new_password' : {
               'required' : 1,
               'type' : 'string'
            },
            'old_password' : {
               'required' : 1,
               'type' : 'string'
            },
            'passthrough' : {},
            'password_type' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'mt5_password_change' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    mt5_password_check(args = {}) {
        const config = {
            'login' : {
               'required' : 1,
               'type' : 'string'
            },
            'mt5_password_check' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'password' : {
               'required' : 1,
               'type' : 'string'
            },
            'password_type' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'mt5_password_check' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    mt5_password_reset(args = {}) {
        const config = {
            'login' : {
               'required' : 1,
               'type' : 'string'
            },
            'mt5_password_reset' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'new_password' : {
               'required' : 1,
               'type' : 'string'
            },
            'passthrough' : {},
            'password_type' : {
               'type' : 'string'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'verification_code' : {
               'required' : 1,
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'mt5_password_reset' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    mt5_withdrawal(args = {}) {
        const config = {
            'amount' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'from_mt5' : {
               'required' : 1,
               'type' : 'string'
            },
            'mt5_withdrawal' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'to_binary' : {
               'required' : 1,
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'mt5_withdrawal' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    new_account_maltainvest(args = {}) {
        const config = {
            'accept_risk' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'account_opening_reason' : {
               'type' : 'string'
            },
            'account_turnover' : {},
            'address_city' : {
               'required' : 1,
               'type' : 'string'
            },
            'address_line_1' : {
               'required' : 1,
               'type' : 'string'
            },
            'address_line_2' : {
               'type' : 'string'
            },
            'address_postcode' : {
               'type' : 'string'
            },
            'address_state' : {
               'type' : 'string'
            },
            'affiliate_token' : {
               'type' : 'string'
            },
            'binary_options_trading_experience' : {},
            'binary_options_trading_frequency' : {},
            'cfd_trading_experience' : {},
            'cfd_trading_frequency' : {},
            'citizen' : {
               'type' : 'string'
            },
            'client_type' : {},
            'date_of_birth' : {
               'required' : 1,
               'type' : 'string'
            },
            'education_level' : {
               'required' : 1
            },
            'employment_industry' : {
               'required' : 1
            },
            'employment_status' : {},
            'estimated_worth' : {
               'required' : 1
            },
            'first_name' : {
               'required' : 1,
               'type' : 'string'
            },
            'forex_trading_experience' : {},
            'forex_trading_frequency' : {},
            'income_source' : {
               'required' : 1
            },
            'last_name' : {
               'required' : 1,
               'type' : 'string'
            },
            'net_income' : {
               'required' : 1
            },
            'new_account_maltainvest' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'occupation' : {
               'required' : 1
            },
            'other_instruments_trading_experience' : {},
            'other_instruments_trading_frequency' : {},
            'passthrough' : {},
            'phone' : {
               'required' : 1,
               'type' : 'string'
            },
            'place_of_birth' : {
               'required' : 1,
               'type' : 'string'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'residence' : {
               'required' : 1,
               'type' : 'string'
            },
            'salutation' : {
               'required' : 1
            },
            'secret_answer' : {
               'type' : 'string'
            },
            'secret_question' : {},
            'source_of_wealth' : {},
            'tax_identification_number' : {
               'required' : 1,
               'type' : 'string'
            },
            'tax_residence' : {
               'required' : 1,
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'new_account_maltainvest' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    new_account_real(args = {}) {
        const config = {
            'account_opening_reason' : {
               'type' : 'string'
            },
            'account_turnover' : {},
            'address_city' : {
               'type' : 'string'
            },
            'address_line_1' : {
               'type' : 'string'
            },
            'address_line_2' : {
               'type' : 'string'
            },
            'address_postcode' : {
               'type' : 'string'
            },
            'address_state' : {
               'type' : 'string'
            },
            'affiliate_token' : {
               'type' : 'string'
            },
            'citizen' : {},
            'client_type' : {},
            'currency' : {},
            'date_of_birth' : {
               'required' : 1,
               'type' : 'string'
            },
            'first_name' : {
               'required' : 1,
               'type' : 'string'
            },
            'last_name' : {
               'required' : 1,
               'type' : 'string'
            },
            'new_account_real' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'phone' : {
               'type' : 'string'
            },
            'place_of_birth' : {
               'type' : 'string'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'residence' : {
               'required' : 1,
               'type' : 'string'
            },
            'salutation' : {
               'required' : 1
            },
            'secret_answer' : {
               'type' : 'string'
            },
            'secret_question' : {},
            'tax_identification_number' : {
               'type' : 'string'
            },
            'tax_residence' : {
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'new_account_real' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    new_account_virtual(args = {}) {
        const config = {
            'affiliate_token' : {
               'type' : 'string'
            },
            'client_password' : {
               'required' : 1,
               'type' : 'string'
            },
            'date_first_contact' : {
               'type' : 'string'
            },
            'gclid_url' : {
               'type' : 'string'
            },
            'new_account_virtual' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'residence' : {
               'required' : 1,
               'type' : 'string'
            },
            'signup_device' : {},
            'utm_campaign' : {
               'type' : 'string'
            },
            'utm_medium' : {
               'type' : 'string'
            },
            'utm_source' : {
               'type' : 'string'
            },
            'verification_code' : {
               'required' : 1,
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'new_account_virtual' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    oauth_apps(args = {}) {
        const config = {
            'oauth_apps' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'oauth_apps' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    paymentagent_list(args = {}) {
        const config = {
            'currency' : {
               'type' : 'string'
            },
            'passthrough' : {},
            'paymentagent_list' : {
               'required' : 1,
               'type' : 'string'
            },
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'paymentagent_list' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    paymentagent_transfer(args = {}) {
        const config = {
            'amount' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'currency' : {
               'required' : 1,
               'type' : 'string'
            },
            'description' : {
               'type' : 'string'
            },
            'dry_run' : {
               'type' : 'numeric'
            },
            'passthrough' : {},
            'paymentagent_transfer' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'transfer_to' : {
               'required' : 1,
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'paymentagent_transfer' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    paymentagent_withdraw(args = {}) {
        const config = {
            'amount' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'currency' : {
               'required' : 1,
               'type' : 'string'
            },
            'description' : {
               'type' : 'string'
            },
            'dry_run' : {
               'type' : 'numeric'
            },
            'passthrough' : {},
            'paymentagent_loginid' : {
               'required' : 1,
               'type' : 'string'
            },
            'paymentagent_withdraw' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'verification_code' : {
               'required' : 1,
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'paymentagent_withdraw' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    payout_currencies(args = {}) {
        const config = {
            'passthrough' : {},
            'payout_currencies' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'payout_currencies' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    ping(args = {}) {
        const config = {
            'passthrough' : {},
            'ping' : {
               'required' : 1
            },
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'ping' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    portfolio(args = {}) {
        const config = {
            'passthrough' : {},
            'portfolio' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'portfolio' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    profit_table(args = {}) {
        const config = {
            'date_from' : {
               'type' : 'string'
            },
            'date_to' : {
               'type' : 'string'
            },
            'description' : {
               'type' : 'numeric'
            },
            'limit' : {
               'type' : 'numeric'
            },
            'offset' : {
               'type' : 'numeric'
            },
            'passthrough' : {},
            'profit_table' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'sort' : {
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'profit_table' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    proposal(args = {}) {
        const config = {
            'amount' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'barrier' : {
               'type' : 'string'
            },
            'barrier2' : {
               'type' : 'string'
            },
            'basis' : {
               'required' : 1
            },
            'contract_type' : {
               'required' : 1
            },
            'currency' : {
               'required' : 1,
               'type' : 'string'
            },
            'date_expiry' : {
               'type' : 'numeric'
            },
            'date_start' : {
               'type' : 'numeric'
            },
            'duration' : {
               'type' : 'numeric'
            },
            'duration_unit' : {},
            'passthrough' : {},
            'product_type' : {},
            'proposal' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'selected_tick' : {
               'type' : 'numeric'
            },
            'subscribe' : {},
            'symbol' : {
               'required' : 1,
               'type' : 'string'
            },
            'trading_period_start' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'proposal' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    proposal_array(args = {}) {
        const config = {
            'amount' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'barriers' : {
               'required' : 1
            },
            'basis' : {
               'required' : 1
            },
            'contract_type' : {
               'required' : 1
            },
            'currency' : {
               'required' : 1,
               'type' : 'string'
            },
            'date_expiry' : {
               'type' : 'numeric'
            },
            'date_start' : {
               'type' : 'numeric'
            },
            'duration' : {
               'type' : 'numeric'
            },
            'duration_unit' : {},
            'passthrough' : {},
            'product_type' : {},
            'proposal_array' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'subscribe' : {},
            'symbol' : {
               'required' : 1,
               'type' : 'string'
            },
            'trading_period_start' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'proposal_array' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    proposal_open_contract(args = {}) {
        const config = {
            'contract_id' : {
               'type' : 'numeric'
            },
            'passthrough' : {},
            'proposal_open_contract' : {
               'required' : 1
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'subscribe' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'proposal_open_contract' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    reality_check(args = {}) {
        const config = {
            'passthrough' : {},
            'reality_check' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'req_id' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'reality_check' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    request_report(args = {}) {
        const config = {
            'date_from' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'date_to' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'passthrough' : {},
            'report_type' : {
               'required' : 1,
               'type' : 'string'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'request_report' : {
               'required' : 1,
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'request_report' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    reset_password(args = {}) {
        const config = {
            'date_of_birth' : {
               'type' : 'string'
            },
            'new_password' : {
               'required' : 1,
               'type' : 'string'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'reset_password' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'verification_code' : {
               'required' : 1,
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'reset_password' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    residence_list(args = {}) {
        const config = {
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'residence_list' : {
               'required' : 1,
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'residence_list' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    revoke_oauth_app(args = {}) {
        const config = {
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'revoke_oauth_app' : {
               'required' : 1,
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'revoke_oauth_app' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    sell(args = {}) {
        const config = {
            'passthrough' : {},
            'price' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'sell' : {
               'required' : 1,
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'sell' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    sell_contract_for_multiple_accounts(args = {}) {
        const config = {
            'passthrough' : {},
            'price' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'sell_contract_for_multiple_accounts' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'shortcode' : {
               'required' : 1,
               'type' : 'string'
            },
            'tokens' : {
               'required' : 1
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'sell_contract_for_multiple_accounts' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    sell_expired(args = {}) {
        const config = {
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'sell_expired' : {
               'required' : 1,
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'sell_expired' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    service_token(args = {}) {
        const config = {
            'passthrough' : {},
            'referrer' : {
               'required' : 1,
               'type' : 'string'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'service' : {
               'required' : 1,
               'type' : 'string'
            },
            'service_token' : {
               'required' : 1,
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'service_token' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    set_account_currency(args = {}) {
        const config = {
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'set_account_currency' : {
               'required' : 1
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'set_account_currency' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    set_financial_assessment(args = {}) {
        const config = {
            'account_turnover' : {},
            'binary_options_trading_experience' : {},
            'binary_options_trading_frequency' : {},
            'cfd_trading_experience' : {},
            'cfd_trading_frequency' : {},
            'education_level' : {
               'required' : 1
            },
            'employment_industry' : {
               'required' : 1
            },
            'employment_status' : {},
            'estimated_worth' : {
               'required' : 1
            },
            'forex_trading_experience' : {},
            'forex_trading_frequency' : {},
            'income_source' : {
               'required' : 1
            },
            'net_income' : {
               'required' : 1
            },
            'occupation' : {
               'required' : 1
            },
            'other_instruments_trading_experience' : {},
            'other_instruments_trading_frequency' : {},
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'set_financial_assessment' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'source_of_wealth' : {}
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'set_financial_assessment' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    set_self_exclusion(args = {}) {
        const config = {
            'exclude_until' : {},
            'max_30day_losses' : {},
            'max_30day_turnover' : {},
            'max_7day_losses' : {},
            'max_7day_turnover' : {},
            'max_balance' : {},
            'max_deposit' : {},
            'max_deposit_end_date' : {},
            'max_losses' : {},
            'max_open_bets' : {},
            'max_turnover' : {},
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'session_duration_limit' : {},
            'set_self_exclusion' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'timeout_until' : {}
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'set_self_exclusion' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    set_settings(args = {}) {
        const config = {
            'account_opening_reason' : {
               'type' : 'string'
            },
            'address_city' : {
               'type' : 'string'
            },
            'address_line_1' : {
               'type' : 'string'
            },
            'address_line_2' : {},
            'address_postcode' : {
               'type' : 'string'
            },
            'address_state' : {
               'type' : 'string'
            },
            'allow_copiers' : {
               'type' : 'numeric'
            },
            'citizen' : {},
            'date_of_birth' : {
               'type' : 'string'
            },
            'email_consent' : {
               'type' : 'numeric'
            },
            'first_name' : {
               'type' : 'string'
            },
            'last_name' : {
               'type' : 'string'
            },
            'passthrough' : {},
            'phone' : {},
            'place_of_birth' : {
               'type' : 'string'
            },
            'req_id' : {
               'type' : 'numeric'
            },
            'request_professional_status' : {
               'type' : 'numeric'
            },
            'residence' : {},
            'salutation' : {},
            'secret_answer' : {
               'type' : 'string'
            },
            'secret_question' : {},
            'set_settings' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'tax_identification_number' : {
               'type' : 'string'
            },
            'tax_residence' : {
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'set_settings' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    statement(args = {}) {
        const config = {
            'action_type' : {
               'type' : 'string'
            },
            'date_from' : {
               'type' : 'numeric'
            },
            'date_to' : {
               'type' : 'numeric'
            },
            'description' : {
               'type' : 'numeric'
            },
            'limit' : {
               'type' : 'numeric'
            },
            'offset' : {
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'statement' : {
               'required' : 1,
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'statement' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    states_list(args = {}) {
        const config = {
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'states_list' : {
               'required' : 1,
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'states_list' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    ticks(args = {}) {
        const config = {
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'subscribe' : {},
            'ticks' : {
               'required' : 1
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'ticks' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    ticks_history(args = {}) {
        const config = {
            'adjust_start_time' : {
               'type' : 'numeric'
            },
            'count' : {
               'type' : 'numeric'
            },
            'end' : {
               'required' : 1,
               'type' : 'string'
            },
            'granularity' : {
               'type' : 'numeric'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'start' : {
               'type' : 'numeric'
            },
            'style' : {},
            'subscribe' : {},
            'ticks_history' : {
               'required' : 1,
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'ticks_history' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    time(args = {}) {
        const config = {
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'time' : {
               'required' : 1,
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'time' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    tnc_approval(args = {}) {
        const config = {
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'tnc_approval' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'ukgc_funds_protection' : {
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'tnc_approval' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    topup_virtual(args = {}) {
        const config = {
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'topup_virtual' : {
               'required' : 1,
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'topup_virtual' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    trading_durations(args = {}) {
        const config = {
            'landing_company' : {},
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'trading_durations' : {
               'required' : 1,
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'trading_durations' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    trading_times(args = {}) {
        const config = {
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'trading_times' : {
               'required' : 1,
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'trading_times' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    transaction(args = {}) {
        const config = {
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'subscribe' : {
               'required' : 1,
               'type' : 'numeric'
            },
            'transaction' : {
               'required' : 1
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'transaction' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    transfer_between_accounts(args = {}) {
        const config = {
            'account_from' : {
               'type' : 'string'
            },
            'account_to' : {
               'type' : 'string'
            },
            'amount' : {
               'type' : 'numeric'
            },
            'currency' : {
               'type' : 'string'
            },
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'transfer_between_accounts' : {
               'required' : 1,
               'type' : 'numeric'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'transfer_between_accounts' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    verify_email(args = {}) {
        const config = {
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'type' : {
               'required' : 1
            },
            'url_parameters' : {
               'affiliate_token' : {
                  'type' : 'string'
               },
               'date_first_contact' : {
                  'type' : 'string'
               },
               'gclid_url' : {
                  'type' : 'string'
               },
               'signup_device' : {},
               'utm_campaign' : {
                  'type' : 'string'
               },
               'utm_medium' : {
                  'type' : 'string'
               },
               'utm_source' : {
                  'type' : 'string'
               }
            },
            'verify_email' : {
               'required' : 1,
               'type' : 'string'
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'verify_email' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }

    website_status(args = {}) {
        const config = {
            'passthrough' : {},
            'req_id' : {
               'type' : 'numeric'
            },
            'subscribe' : {},
            'website_status' : {
               'required' : 1
            }
         };

        const error = checkErrorAndValidate({ config, args, call_name: 'website_status' });
        if (error) {
            return throwError(error);
        }

        return this.send(args);
    }
}
